# -*- coding: utf-8 -*-
"""Copy of EmailClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEmUQ1ksllImU6WT4nN_2zMnEv6zUdWr
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/481 project/spam_ham_dataset.csv')

data = df.head(5)
print(data)

data = df.where((pd.notnull(df)), '')

data.head(10)

data.info()

data.shape

data.loc[data['label'] == 'spam', 'label'] = 0
data.loc[data['label'] == 'ham', 'label'] = 1

X = data['text']
Y = data['label']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, random_state = 3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)


X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Check for NaN values and handle them
if Y_train.isnull().values.any():
    Y_train = Y_train.fillna(0)  # or use another strategy like dropping the rows
if Y_test.isnull().values.any():
    Y_test = Y_test.fillna(0)

# Now convert to integer type
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

model = LogisticRegression()

model.fit(X_train_features, Y_train)

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data: ', accuracy_on_training_data)

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print('Accuracy on test data: ', accuracy_on_test_data)

input = ["Subject: tenaska iv julydarren : please remove the price on the tenaska iv sale , deal 384258 , for july and enter the demand fee . the amount should be $ 3 , 902 , 687 . 50 . thanks , megan"]

input_data_features = feature_extraction.transform(input)

prediction = model.predict(input_data_features)

print(prediction)

if prediction[0] == 1:
  print("Ham Mail")
else:
  print("spam")

